{"version":3,"sources":["enums/index.ts","constants/urls.ts","api/image.ts","store/image/image.actions.ts","store/image/image.reducer.ts","store/rootStore.ts","components/DropFile/DropFile.tsx","components/ImageList/ImageList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RequestStatusEnum","HOST","API","ImageApi","axios","get","then","data","fd","post","SET_IMAGES","FETCH_IMAGES_STATUS","SAVE_IMAGE_STATUS","setImages","images","type","setFetchImagesStatus","status","setSaveImageStatus","saveImage","dispatch","getState","a","PENDING","image","updatedImages","SUCCESS","catch","err","FAILURE","response","message","initialState","fetchImagesStatus","saveImageStatus","rootReducer","combineReducers","state","action","store","createStore","applyMiddleware","thunk","DropFile","useDispatch","useSelector","enqueueSnackbar","useSnackbar","useDropzone","maxFiles","multiple","accept","onDropRejected","fileRejections","errors","variant","onDropAccepted","files","file","FormData","append","errMessage","getRootProps","getInputProps","isSavingImage","Box","component","sx","p","border","position","disabled","Typography","align","cursor","className","LinearProgress","ImageListWrapper","flexGrow","Grid","container","spacing","alignItems","map","item","xs","Card","height","display","flexDirection","CardMedia","url","alt","name","flex","CardContent","gutterBottom","CardActions","Button","_id","App","useEffect","getImages","Container","my","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","maxSnack","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.a0531085.chunk.js","sourcesContent":["export enum RequestStatusEnum {\r\n    PENDING,\r\n    FAILURE,\r\n    SUCCESS\r\n}","export const HOST = 'http://localhost:8080';\r\nexport const API = `${HOST}/api`;\r\n","import axios from 'axios';\r\n\r\nimport { API } from \"../constants/urls\";\r\n\r\ntype GetImagesType = {\r\n    images: Array<ImageType>\r\n}\r\n\r\ntype SaveImageType = {\r\n    image: ImageType\r\n}\r\n\r\nexport class ImageApi {\r\n    static getImages() {\r\n        return axios.get<GetImagesType>(`${API}/images`).then(data => data.data);\r\n    }\r\n\r\n    static saveImage(fd: FormData) {\r\n        return axios.post<SaveImageType>(`${API}/images`, fd).then(data => data.data);\r\n    }\r\n}\r\n","import { ThunkAction } from \"redux-thunk\";\r\n\r\nimport { ImageApi } from \"../../api/image\";\r\nimport { AppState } from \"../rootStore\";\r\nimport { RequestStatusEnum } from \"../../enums\";\r\n\r\nexport const SET_IMAGES = 'SET_IMAGES';\r\nexport const FETCH_IMAGES_STATUS = 'FETCH_IMAGES_STATUS';\r\nexport const SAVE_IMAGE_STATUS = 'SAVE_IMAGE_STATUS';\r\n\r\ntype SetImagesType = {\r\n    type: typeof SET_IMAGES,\r\n    images: Array<ImageType>\r\n}\r\n\r\nexport const setImages = (images: Array<ImageType>): SetImagesType => (\r\n    { type: SET_IMAGES, images }\r\n);\r\n\r\ntype FetchImagesStatusType = {\r\n    type: typeof FETCH_IMAGES_STATUS,\r\n    status: RequestStatusEnum\r\n}\r\n\r\nexport const setFetchImagesStatus = (status: RequestStatusEnum): FetchImagesStatusType => (\r\n    { type: FETCH_IMAGES_STATUS, status }\r\n)\r\n\r\ntype SaveImageStatusType = {\r\n    type: typeof SAVE_IMAGE_STATUS,\r\n    status: RequestStatusEnum\r\n}\r\n\r\nexport const setSaveImageStatus = (status: RequestStatusEnum): SaveImageStatusType => (\r\n    { type: SAVE_IMAGE_STATUS, status }\r\n)\r\n\r\nexport const fetchImages = (limit: number = 1000, skip: number = 0): ThunkAction<any, AppState, unknown, ImageActionsTypes> => {\r\n    return async dispatch => {\r\n        dispatch(setFetchImagesStatus(RequestStatusEnum.PENDING));\r\n        ImageApi.getImages().then(({ images }) => {\r\n            dispatch(setImages(images));\r\n            dispatch(setFetchImagesStatus(RequestStatusEnum.SUCCESS));\r\n        }).catch(err => {\r\n            dispatch(setFetchImagesStatus(RequestStatusEnum.FAILURE));\r\n        });\r\n    }\r\n}\r\n\r\nexport const saveImage = (fd: FormData): ThunkAction<any, AppState, unknown, ImageActionsTypes> => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(setSaveImageStatus(RequestStatusEnum.PENDING));\r\n\r\n        return ImageApi.saveImage(fd).then(({ image }) => {\r\n            const { images } = getState().image;\r\n            const updatedImages = [image, ...images];\r\n\r\n            dispatch(setImages(updatedImages));\r\n            dispatch(setSaveImageStatus(RequestStatusEnum.SUCCESS));\r\n        }).catch(err => {\r\n            dispatch(setSaveImageStatus(RequestStatusEnum.FAILURE));\r\n            return err.response.data.message;\r\n        });\r\n    }\r\n}\r\n\r\nexport type ImageActionsTypes = FetchImagesStatusType | SaveImageStatusType | SetImagesType\r\n","import { FETCH_IMAGES_STATUS, ImageActionsTypes, SAVE_IMAGE_STATUS, SET_IMAGES } from \"./image.actions\";\r\nimport { RequestStatusEnum } from \"../../enums\";\r\n\r\nconst initialState = {\r\n    images: [] as Array<ImageType>,\r\n    fetchImagesStatus: null as RequestStatusEnum | null,\r\n    saveImageStatus: null as RequestStatusEnum | null\r\n}\r\n\r\ntype ImageInitialType = typeof initialState;\r\n\r\nexport const imageReducer = (state: ImageInitialType = initialState, action: ImageActionsTypes): ImageInitialType => {\r\n    switch (action.type) {\r\n        case SET_IMAGES:\r\n            return { ...state, images: action.images }\r\n        case SAVE_IMAGE_STATUS:\r\n            return { ...state, saveImageStatus: action.status }\r\n        case FETCH_IMAGES_STATUS:\r\n            return { ...state, fetchImagesStatus: action.status }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from 'redux-thunk'\r\n\r\nimport { imageReducer } from \"./image/image.reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    image: imageReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n","import React, { FC } from 'react'\r\nimport { Box, LinearProgress, Typography } from '@mui/material';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useSnackbar } from 'notistack';\r\nimport { useDropzone } from 'react-dropzone'\r\n\r\nimport { saveImage } from \"../../store/image/image.actions\";\r\n\r\nimport { RequestStatusEnum } from \"../../enums\";\r\nimport './DropFile.css';\r\nimport { AppState } from \"../../store/rootStore\";\r\n\r\nexport const DropFile: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const saveImageStatus = useSelector<AppState, RequestStatusEnum | null>(store => store.image.saveImageStatus);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        maxFiles: 1, // If drop more than 1 file throw error(run onDropRejected)\r\n        multiple: false,\r\n        accept: 'image/jpeg',\r\n        onDropRejected: (fileRejections) => {\r\n            enqueueSnackbar(fileRejections[0].errors[0].message, { variant: 'error' });\r\n        },\r\n        onDropAccepted: async (files) => {\r\n            const file = files[0];\r\n            const fd = new FormData();\r\n            fd.append('image', file);\r\n\r\n            const errMessage = await dispatch(saveImage(fd));\r\n            if (errMessage) {\r\n                enqueueSnackbar(errMessage, { variant: 'error' });\r\n            }\r\n        }\r\n    });\r\n\r\n    const isSavingImage = saveImageStatus === RequestStatusEnum.PENDING;\r\n\r\n    return (\r\n        <Box\r\n            {...getRootProps()}\r\n            component=\"div\"\r\n            sx={{ p: 2, border: '2px dashed grey', position: 'relative' }}\r\n        >\r\n            <input {...getInputProps({ disabled: isSavingImage })}/>\r\n\r\n            <Typography variant=\"subtitle1\" align=\"center\" sx={{ cursor: 'pointer' }}>\r\n                {isSavingImage ? 'Loading...' : 'Drop file here'}\r\n            </Typography>\r\n\r\n            {\r\n                isSavingImage &&\r\n                <Box className=\"progress-wrapper\">\r\n                    <LinearProgress />\r\n                </Box>\r\n            }\r\n        </Box>\r\n    );\r\n}\r\n","import React, { FC } from \"react\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardMedia, Grid,\r\n    Typography\r\n} from '@mui/material'\r\n\r\nimport { HOST } from \"../../constants/urls\";\r\n\r\ntype OwnTypes = {\r\n    images: Array<ImageType>\r\n}\r\n\r\nexport const ImageListWrapper: FC<OwnTypes> = ({ images }) => {\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <Grid container spacing={2} alignItems=\"stretch\">\r\n                {images.map((image: ImageType) => (\r\n                    <Grid key={image._id} item xs={4}>\r\n                        <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\r\n                            <CardMedia\r\n                                component=\"img\"\r\n                                image={`${HOST}/${image.url}`}\r\n                                alt={image.name}\r\n                            />\r\n                            <Box sx={{ flex: 1 }}>\r\n                                <CardContent>\r\n                                    <Typography gutterBottom component=\"div\">\r\n                                        {image.name}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                            </Box>\r\n                            <CardActions>\r\n                                <Button>Download</Button>\r\n                            </CardActions>\r\n                        </Card>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Box, Container, Typography } from \"@mui/material\";\r\n\r\nimport { DropFile } from \"./components/DropFile/DropFile\";\r\nimport { ImageListWrapper } from \"./components/ImageList/ImageList\";\r\n\r\nimport { fetchImages } from \"./store/image/image.actions\";\r\n\r\nimport { AppState } from \"./store/rootStore\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch();\r\n    const images = useSelector<AppState, Array<ImageType>>(store => store.image.images);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchImages())\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            <Typography variant=\"h2\" component=\"div\" align=\"center\" gutterBottom>\r\n                Img BG Delete\r\n            </Typography>\r\n\r\n            <DropFile />\r\n\r\n            <Box sx={{ my: 5 }}>\r\n                <ImageListWrapper images={images} />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport { CssBaseline } from '@mui/material';\r\nimport { SnackbarProvider } from 'notistack';\r\n\r\nimport { store } from \"./store/rootStore\";\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <SnackbarProvider maxSnack={3}>\r\n              <CssBaseline />\r\n              <App />\r\n          </SnackbarProvider>\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}